---
type Props = { direction?: "left" | "right"; speed?: "slow" | "fast" };

const { direction = "left", speed = "slower" } = Astro.props;
---

<div id="scroller" data-direction={direction} data-speed={speed}>
  <ul id="scroller_inner" class="opacity-0">
    <slot />
  </ul>
</div>

<style>
  :root {
    --gap: 3.2rem;
  }

  picture {
    height: 100px;
    object-fit: cover;
    aspect-ratio: 16 / 9;
    display: block;
    overflow: hidden;
    border-radius: 1rem;
  }

  #scroller {
    /* max-width: 600px; */
  }

  #scroller_inner {
    display: flex;
    gap: var(--gap);
    padding-block: 0.5rem;
    justify-content: space-evenly;
  }

  #scroller[data-animated="true"] {
    overflow: hidden;
    mask: linear-gradient(
      90deg,
      transparent,
      white 20%,
      white 80%,
      transparent
    );
  }

  #scroller[data-animated="true"] #scroller_inner {
    width: max-content;
    flex-wrap: nowrap;
    animation: scrollX var(--animation-duration, 40s)
      var(--animation-direction, forwards) linear infinite;
    will-change: transform;
  }

  #scroller[data-animated="false"] #scroller_inner {
    flex-wrap: wrap;
  }

  #scroller[data-direction="right"] {
    --animation-direction: reverse;
  }
  #scroller[data-direction="left"] {
    --animation-direction: forwards;
  }

  #scroller[data-speed="slower"] {
    --animation-duration: 200s;
  }
  #scroller[data-speed="slow"] {
    --animation-duration: 50s;
  }
  #scroller[data-speed="fast"] {
    --animation-duration: 20s;
  }

  @keyframes scrollX {
    to {
      transform: translate(calc(-50% - calc(var(--gap) / 2)));
    }
  }
</style>

<script>
  import { gsap } from "gsap";
  import { prefersReducedMotion } from "@/utils/client/accessibilty";

  const scrollerWrapper = document.querySelectorAll("#scroller");

  if (!prefersReducedMotion()) {
    await addAnimation();
  } else {
    scrollerWrapper.forEach((scroller) => {
      scroller.setAttribute("data-animated", "false");
    });
  }

  async function addAnimation() {
    scrollerWrapper.forEach((scroller) => {
      scroller.setAttribute("data-animated", "true");

      const innerScroller = scroller.querySelector(
        "#scroller_inner",
      ) as HTMLElement;

      Array.from(innerScroller?.children).forEach((item) => {
        const duplicatedItem = item.cloneNode(true);
        //   duplicatedItem.setAttribute('aria-hidden', 'true');
        innerScroller.appendChild(duplicatedItem);
      });

      gsap.to(innerScroller, { duration: 2, opacity: 1 });
    });
  }
</script>
