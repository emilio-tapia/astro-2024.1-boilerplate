---
import Icon from "astro-icon";
import { languages } from "../../i18n/ui";
import { getLangFromUrl, useTranslations } from "@/i18n/utils";
import { clsxm } from "@/utils/styles/tw";
const currentLang = getLangFromUrl(Astro.url);
const t = useTranslations(currentLang);
---

<lang-dropdown
  class="relative text-left dropdown h-full flex items-center"
  aria-label="Language Dropdown"
>
  <span class="block h-full"
    ><button
      class="inline-flex gap-2 border custom-border-color px-4 py-1 justify-center w-full p-1 text-sm font-medium leading-5 transition duration-150 ease-in-out rounded-full focus:outline-none focus:shadow-outline-blue h-full items-center text-matisse dark:text-white dark:text-gray_matisse-50 dark:border-slate-300/20 bg-white/40 dark:bg-transparent focus-within:bg-white dark:focus-within:bg-zinc-900"
      type="button"
      data-dropdown="button"
      aria-haspopup="true"
      aria-expanded="false"
      aria-controls="lang-controls"
    >
      <span class=""><Icon name="lang" class="stroke-current w-5" /></span>
      <span class="font-light uppercase">{currentLang}</span>
      <svg class="w-5 h-5 -mr-1" viewBox="0 0 20 20" fill="currentColor"
        ><path
          fill-rule="evenodd"
          d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
          clip-rule="evenodd"></path></svg
      >
    </button></span
  >
  <div
    class:list={clsxm([
      " absolute right-0 bottom-0",
      "transition-all duration-300",
      "scale-95 w-full",
    ])}
    class="opacity-0 invisible dropdown-menu"
    tabindex="0"
  >
    <div
      class:list={clsxm([
        "absolute top-0 right-0",
        "w-full w-[calc(100%+1rem)] mt-2",
        "rounded-xl shadow-lg outline-none",
        "custom-border-color border",
      ])}
      class="bg-matisse_gray-100 lg:bg-white/95 dark:bg-blue_dark-300 lg:dark:bg-blue_dark-300/95 divide-y divide-inherit"
      data-dropdown="popup"
      aria-expanded="false"
      id="lang-controls"
      role="menu"
    >
      <div class="px-4 py-3">
        <p class="text-xs leading-5 text-gray-500 dark:text-gray-300">
          {t("nav").lang}
        </p>
        <p
          class="text-sm font-medium leading-5 text-matisse-800 dark:text-gray-50 truncate"
        >
          {languages[currentLang][currentLang]}
        </p>
      </div>
      <div class="py-1 text-gray-500 dark:text-gray_matisse-50">
        {
          Object.entries(languages).map(([lang, label]) =>
            lang !== currentLang ? (
              <a
                href={lang === "es" ? "/" : `/${lang}/`}
                class:list={clsxm([
                  "hover:bg-[rgba(0,0,0,0.05)] hover:text-matisse-800 dark:hover:text-white/80 dark:hover:bg-[rgba(100,100,100,0.15)]",
                  "active:bg-[rgba(0,0,0,0.05)] dark:active:bg-[rgba(0,0,0,0.15)] active:text-matisse-800 dark:active:text-gray_matisse-100",
                ])}
                class="text-left text-sm flex justify-between w-full px-4 py-2 leading-5"
              >
                {label[currentLang]}
              </a>
            ) : null,
          )
        }
      </div>
    </div>
  </div>
</lang-dropdown>

<style>
  .dropdown:focus-within .dropdown-menu {
    opacity: 1;
    transform: translate(0) scale(1);
    visibility: visible;
  }
</style>

<!-- TODO IMPLEMENT CHANGE ARIA EXPANDED WHEN FOCUS EVENT -->
<script>
  class LangDropdown extends HTMLElement {
    constructor() {
      super();
      const popup = this.querySelector("[data-dropdown='popup']")!;
      const button = this.querySelector("[data-dropdown='button']")!;
      button?.addEventListener("click", () => {
        button.getAttribute("aria-expanded");
        popup.getAttribute("aria-expanded");
        console.log(button);
      });
    }
  }

  customElements.define("lang-dropdown", LangDropdown);
</script>

<!-- <script>
  const element = document.getElementById("dropwdown-body")?.firstElementChild;

  console.log(isInView(element));

  function isInView(el) {
    let rect = el.getBoundingClientRect();
    const BOUND = 64;
    console.log(rect);
    let isCollapsingBottom = rect.bottom <= window.innerHeight - BOUND;
    let isCollapsingRight = rect.right <= window.innerWidth - BOUND;
    return { isCollapsingRight, isCollapsingBottom };
  }
</script> -->
